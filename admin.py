import os

from aiogram import types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ParseMode, ContentType

from aiogram_dialog import Dialog, DialogManager, Window, ChatEvent, StartMode
from aiogram_dialog.manager.protocols import LaunchMode
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Select, Back, Column, Start, Cancel, Url
from aiogram_dialog.widgets.media import StaticMedia
from aiogram_dialog.widgets.text import Const, Format

from database import ActiveUsers, Questions
from bot import MyBot
from config import CHAT_ID, categories
from user import UserSG

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message

from aiogram_dialog import Dialog, DialogManager, Window, StartMode
from aiogram_dialog.manager.protocols import LaunchMode
from aiogram_dialog.widgets.kbd import Start
from aiogram_dialog.widgets.text import Const

from database import ActiveUsers
from bot import MyBot
from user import UserSG, RegistrationSG, registration_dialog, user_menu_dialog, programs_dialog_sch, \
    programs_dialog_std, question_dialog


async def start(m: Message, dialog_manager: DialogManager):
    if not (await ActiveUsers.filter(user_id=m.from_user.id).values_list("user_id")):
        await dialog_manager.start(RegistrationSG.hi, mode=StartMode.RESET_STACK)
        # –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        dialog_manager.current_context().dialog_data["id"] = m.from_user.id
    elif (await ActiveUsers.filter(user_id=m.from_user.id).values_list("is_admin", flat=True))[0]:
        await dialog_manager.start(AdminSG.admin, mode=StartMode.RESET_STACK)
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω
    else:
        await MyBot.bot.send_message(m.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, '
                                                     f'<b>{"".join((await ActiveUsers.filter(user_id=m.from_user.id).values_list("user_name"))[0])}!</b>',
                                     parse_mode="HTML")
        # –ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é
        await dialog_manager.start(UserSG.menu, mode=StartMode.RESET_STACK)
        dialog_manager.current_context().dialog_data["name"] = \
            (await ActiveUsers.filter(user_id=m.from_user.id).values_list("user_name"))[0]
        dialog_manager.current_context().dialog_data["grade"] = \
            (await ActiveUsers.filter(user_id=m.from_user.id).values_list("grade"))[0]


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä start
MyBot.register_handler(method=start, commands=["start"])
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏

MyBot.register_dialogs(registration_dialog, user_menu_dialog, programs_dialog_sch, programs_dialog_std, question_dialog)


# –í –¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∞


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AdminSG(StatesGroup):
    admin = State()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–µ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
class AnswerSG(StatesGroup):
    answer = State()
    ticket = State()
    check = State()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–µ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ—Å—Ç–æ–º
class PostSG(StatesGroup):
    post = State()
    to_who = State()
    check = State()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def get_data(dialog_manager: DialogManager, **kwargs):
    return {
        'post': dialog_manager.current_context().dialog_data.get("post", None),
        'answer': dialog_manager.current_context().dialog_data.get("answer", None),
        'ticket': dialog_manager.current_context().dialog_data.get("ticket", None),
        'questioner': dialog_manager.current_context().dialog_data.get("questioner", None),
        'check': dialog_manager.current_context().dialog_data.get("check", None),
        'category': dialog_manager.current_context().dialog_data.get("category", None),
        'photo': dialog_manager.current_context().dialog_data.get("photo", None),
    }


# –ö–æ—Ä–Ω–µ–≤–æ–π –¥–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∞
menu_admin_dialog = Dialog(
    Window(
        Const("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ ü§î"),
        Start(Const("–Ø —Ö–æ—á—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å! ‚úÖ"), id="an", state=AnswerSG.answer),
        Start(Const("–Ø —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç! ‚úâÔ∏è"), id="po", state=PostSG.post),
        Start(Const("–Ø —Ö–æ—á—É –ø–æ–±—ã—Ç—å —é–∑–µ—Ä–æ–º! ‚úâÔ∏è"), id="uss", state=UserSG.admin_menu),
        Url(Const("–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚ÑπÔ∏è"), Const("http://178.216.98.49/programs")),
        state=AdminSG.admin
    ),
    launch_mode=LaunchMode.ROOT
)


async def post_handler(m: Message, dialog: Dialog, manager: DialogManager):
    if m.text is None:
        manager.current_context().dialog_data["post"] = m.caption
        manager.current_context().dialog_data["photo"] = await MyBot.bot.get_file(m.photo[-1].file_id)
    else:
        manager.current_context().dialog_data["post"] = m.text
        manager.current_context().dialog_data["photo"] = None
    await manager.dialog().switch_to(PostSG.to_who)


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def on_who_clicked(c: ChatEvent, select: Select, manager: DialogManager, item_id: str):
    manager.current_context().dialog_data["category"] = item_id
    await manager.dialog().switch_to(PostSG.check)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ (–ø–æ—Å—Ç–∞)
async def on_post_ok_clicked(c: CallbackQuery, button: Button, manager: DialogManager):
    for grade in categories[manager.current_context().dialog_data["category"]]:
        for chel in await ActiveUsers.filter(grade=grade).values_list("user_id", flat=True):
            if manager.current_context().dialog_data["photo"] is None:
                await MyBot.bot.send_message(chel, manager.current_context().dialog_data["post"])
            else:
                await MyBot.bot.send_photo(chel, manager.current_context().dialog_data["photo"].file_id,
                                           caption=manager.current_context().dialog_data["post"])
    await MyBot.bot.send_message(CHAT_ID, "–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    await manager.done()
    await manager.start(AdminSG.admin, mode=StartMode.NORMAL)


# –í–µ—Ç–∫–∞ —Å –ø–æ—Å—Ç–æ–º
post_dialog = Dialog(
    Window(
        Const("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞"),
        MessageInput(post_handler, content_types=["text", "photo"]),
        Cancel(Const("‚è™ –ù–∞–∑–∞–¥")),
        state=PostSG.post
    ),
    Window(
        Const("–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?"),
        Column(Select(
            Format("{item}"),
            items=["–®–∫–æ–ª—å–Ω–∏–∫–∞–º",
                   "–°—Ç—É–¥–µ–Ω—Ç–∞–º",
                   "–í—Å–µ–º"
                   ],
            item_id_getter=lambda x: x,
            id="grades",
            on_click=on_who_clicked,
        )),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        state=PostSG.to_who
    ),
    Window(
        Format('<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n'
               '<b>–ü–æ—Å—Ç:</b> {post}\n'
               ),
        Column(
            Button(Const("–í—Å—ë –≤–µ—Ä–Ω–æ! ‚úÖ"), id="yes", on_click=on_post_ok_clicked),
            Back(Const("‚è™ –ù–∞–∑–∞–¥"))
        ),
        parse_mode=ParseMode.HTML,
        state=PostSG.check,
        getter=get_data
    ),
    launch_mode=LaunchMode.SINGLE_TOP
)


async def answer_handler(m: Message, dialog: Dialog, manager: DialogManager):
    # –ù–∞—Ö–æ–¥–∏–º –≤ –ë–¥ –≤—Å–µ –∫–ª—é—á–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –ª–∏ –æ–Ω–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    for i in await Questions.filter().values_list("key",
                                                  flat=True):
        if m.text.find(str(i)) != -1:
            # –ó–∞–º–µ–Ω—è–µ–º –∫–ª—é—á –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            manager.current_context().dialog_data["answer"] = m.text.replace(str(i), "")
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ (—Ç–∏–∫–µ—Ç–∞) –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            manager.current_context().dialog_data["ticket"] = str(i)
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è —é–∑–µ—Ä–∞ –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            manager.current_context().dialog_data["questioner"] = (await Questions.filter(key=i).values_list(
                "user_id__code_name", flat=True))[0]
            await manager.dialog().switch_to(AnswerSG.check)
            return
    await MyBot.bot.send_message(m.chat.id, "–í–æ–ø—Ä–æ—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    await manager.done()
    await manager.start(AdminSG.admin, mode=StartMode.NORMAL)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
async def on_answer_ok_clicked(c: CallbackQuery, button: Button, manager: DialogManager):
    await MyBot.bot.send_message(
        (await Questions.filter(key=manager.current_context().dialog_data["ticket"]).values_list("user_id_id",
                                                                                                 flat=True))[0],
        manager.current_context().dialog_data["answer"])
    # –ù–∞—Ö–æ–¥–∏–º –≤ –±–¥ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    await Questions.filter(key=manager.current_context().dialog_data["ticket"]).update(is_answered=True)
    await MyBot.bot.send_message(c.from_user.id, "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    await manager.done()
    await manager.start(AdminSG.admin, mode=StartMode.NORMAL)


# –í–µ—Ç–∫–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å
answer_dialog = Dialog(
    Window(
        Const("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"),
        MessageInput(answer_handler),
        Cancel(Const("‚è™ –ù–∞–∑–∞–¥")),
        state=AnswerSG.answer
    ),
    Window(
        Format('<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n'
               '<b>–¢–∏–∫–µ—Ç:</b> {ticket}\n'
               '<b>–û—Ç–≤–µ—Ç:</b> {answer}\n'
               '<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {questioner}\n'
               ),
        Column(
            Button(Const("–í—Å—ë –≤–µ—Ä–Ω–æ! ‚úÖ"), id="yes", on_click=on_answer_ok_clicked),
            Back(Const("‚è™ –ù–∞–∑–∞–¥"))
        ),
        parse_mode=ParseMode.HTML,
        state=AnswerSG.check,
        getter=get_data
    ),
    launch_mode=LaunchMode.SINGLE_TOP
)

MyBot.register_dialogs(menu_admin_dialog, answer_dialog, post_dialog)
