from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ParseMode

from aiogram_dialog import Dialog, DialogManager, Window, ChatEvent, StartMode
from aiogram_dialog.manager.protocols import ManagedDialogAdapterProto, LaunchMode
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Select, Row, SwitchTo, Back, Start, Cancel, Url
from aiogram_dialog.widgets.text import Const, Format

from database import ActiveUsers, Questions, Programs
from bot import MyBot
from config import Counter, NameCounter, CHAT_ID


# PS: –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å –∫–∞–∫ —Ä–µ–¥–∞—á–∏—Ç—å —Ä—É–∫–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ docker, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–∫–∏–Ω—É—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—ã
# —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ –∏–Ω—Ñ—É –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RegistrationSG(StatesGroup):
    hi = State()
    grade = State()
    choose_grade = State()


# –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "—Å—Ç—É–¥–µ–Ω—Ç"
async def on_student_clicked(c: CallbackQuery, button: Button, manager: DialogManager):
    count = NameCounter.get_count()
    manager.current_context().dialog_data["grade"] = "12"
    while await ActiveUsers.filter(code_name=count).all():
        count = NameCounter.get_count()
    await ActiveUsers(user_id=c.from_user.id,
                      password=None,
                      is_admin=False,
                      code_name=count,
                      user_name=c.from_user.first_name,
                      grade="12",
                      link=None
                      ).save()
    await MyBot.bot.send_message(manager.current_context().dialog_data["id"], "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –∑–∞—Ä–µ–≥–∞–Ω—ã!")
    await manager.done()
    await manager.start(UserSG.menu, mode=StartMode.RESET_STACK)


# –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è (–¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤)
async def on_grade_clicked(c: ChatEvent, select: Select, manager: DialogManager, item_id: str):
    count = NameCounter.get_count()
    manager.current_context().dialog_data["grade"] = item_id
    while await ActiveUsers.filter(code_name=count).all():
        count = NameCounter.get_count()
    await ActiveUsers(user_id=c.from_user.id,
                      is_admin=False,
                      password=None,
                      code_name=count,
                      user_name=c.from_user.first_name,
                      grade=manager.current_context().dialog_data["grade"],
                      link=None
                      ).save()
    await MyBot.bot.send_message(manager.current_context().dialog_data["id"], "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –∑–∞—Ä–µ–≥–∞–Ω—ã!")
    await manager.done()
    await manager.start(UserSG.menu, mode=StartMode.RESET_STACK)


# –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
registration_dialog = Dialog(
    Window(
        Const("–ü—Ä–∏–≤–µ—Ç! –ú—ã ‚Äì –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Brainz, –¥–µ–ª–∞–µ–º –æ–∫–æ–ª–æ 50 –ø—Ä–æ–≥—Ä–∞–º–º –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –≥–æ–¥: "
              "–∏–≥—Ä—ã, –∫–µ–π—Å—ã, –∫—É—Ä—Å—ã, –ø—Ä–∞–∫—Ç–∏–∫–∞, –∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä."),
        SwitchTo(Const("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!"), id="fi", state=RegistrationSG.grade),
        state=RegistrationSG.hi
    ),
    Window(
        Const("–ê —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Ç—ã?"),
        SwitchTo(Const("–®–∫–æ–ª—å–Ω–∏–∫"), id="school", state=RegistrationSG.choose_grade),
        Button(Const("–°—Ç—É–¥–µ–Ω—Ç"), id="student", on_click=on_student_clicked),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        state=RegistrationSG.grade
    ),
    Window(
        Const("–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?"),
        Row(Select(
            Format("{item}"),
            items=["<7",
                   "8",
                   "9",
                   "10",
                   "11"
                   ],
            item_id_getter=lambda x: x,
            id="grades",
            on_click=on_grade_clicked,
        )),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        state=RegistrationSG.choose_grade
    ),
    launch_mode=LaunchMode.SINGLE_TOP
)


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserSG(StatesGroup):
    menu = State()
    admin_menu = State()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–º
class ProgramsSG_std(StatesGroup):
    choose_program = State()
    program_info = State()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–º
class ProgramsSG_sch(StatesGroup):
    choose_program = State()
    program_info = State()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
class QuestionsSG(StatesGroup):
    choose = State()
    faq = State()
    ask = State()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def get_data_user(dialog_manager: DialogManager, **kwargs):
    return {
        'id': dialog_manager.current_context().dialog_data.get("id", None),
        'name': dialog_manager.current_context().dialog_data.get("name", None),
        'grade': dialog_manager.current_context().dialog_data.get("grade", None),
    }


# –î–∏–∞–ª–æ–≥ —é–∑–µ—Ä–∞ (—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
user_menu_dialog = Dialog(
    Window(
        Format("–≠—Ç–æ –º–µ–Ω—é. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, "
               "–∞ –µ—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –∑–∞–¥–∞—Ç—å –∏—Ö –∫–æ–º–∞–Ω–¥–µ Brainz."),
        Start(Const("–ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ üßë‚Äçüéì"), id="stud", state=ProgramsSG_std.choose_program),
        Start(Const("–ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ üéí"), id="sch", state=ProgramsSG_sch.choose_program),
        Start(Const("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ Brainz! ‚ùì"), id="qu", state=QuestionsSG.choose),
        parse_mode=ParseMode.HTML,
        # getter=get_data_user,
        state=UserSG.menu
    ),
    Window(
        Format("–≠—Ç–æ –º–µ–Ω—é. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, "
               "–∞ –µ—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –∑–∞–¥–∞—Ç—å –∏—Ö –∫–æ–º–∞–Ω–¥–µ Brainz."),
        Start(Const("–ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ üßë‚Äçüéì"), id="stud", state=ProgramsSG_std.choose_program),
        Start(Const("–ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ üéí"), id="sch", state=ProgramsSG_sch.choose_program),
        Start(Const("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ Brainz! ‚ùì"), id="qu", state=QuestionsSG.choose),
        Cancel(Const("‚è™ –ù–∞–∑–∞–¥")),
        parse_mode=ParseMode.HTML,
        # getter=get_data_user,
        state=UserSG.admin_menu
    ),
    launch_mode=LaunchMode.SINGLE_TOP
)


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
async def quest_handler(m: Message, dialog: ManagedDialogAdapterProto, manager: DialogManager):
    count = Counter.get_count()
    name = (await ActiveUsers.filter(user_id=m.from_user.id).values_list("code_name", flat=True))[0]
    while await Questions.filter(key=count).values_list():  # –ü–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º - –≥–µ–Ω–µ—Ä–∏–º –µ–≥–æ
        # –∑–∞–Ω–æ–≤–æ
        count = Counter.get_count()  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (—Ü–∏–∫–ª –Ω–∞ —Ç–æ—Ç —Å–ª—É—á–∞–π –µ—Å–ª–∏ –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—è—Ç)
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ñ–æ—Ç–∫–∞
    if m.text is None:
        await MyBot.bot.send_photo(CHAT_ID, (await MyBot.bot.get_file(m.photo[-1].file_id)).file_id, caption=f'<b>{str(count)}</b>' + '\n'
                                   + m.caption + "\n–û—Ç: " + name, parse_mode="HTML")
        await Questions(key=count, user_id_id=m.from_user.id, question=m.caption, is_answered=False).save()

    else:
        await MyBot.bot.send_message(CHAT_ID, f'<b>{str(count)}</b>' + '\n' + m.text + "\n–û—Ç: " + name,
                                     parse_mode="HTML")
        await Questions(key=count, user_id_id=m.from_user.id, question=m.text, is_answered=False).save()

    await MyBot.bot.send_message(m.from_user.id, '–ù–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ —Å–ø–µ—à–∏—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ, –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –ø—Ä—è–º–æ –≤ –±–æ—Ç.')
    await manager.done()

    if (await ActiveUsers.filter(user_id=m.from_user.id).values_list("is_admin", flat=True))[0]:
        await manager.start(UserSG.admin_menu)
    else:
        await manager.start(UserSG.menu, mode=StartMode.RESET_STACK)


# –î–∏–∞–ª–æ–≥ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
question_dialog = Dialog(
    Window(
        Format("–ü—Ä–µ–∂–¥–µ, —á–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å, —É–±–µ–¥–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ FAQ."),
        SwitchTo(Const("–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"), id="faq", state=QuestionsSG.faq),
        SwitchTo(Const("–í—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å."), id="ask", state=QuestionsSG.ask),
        Cancel(Const("‚è™ –ù–∞–∑–∞–¥")),
        parse_mode=ParseMode.HTML,
        state=QuestionsSG.choose

    ),
    Window(
        Const("–ó–¥–µ—Å—å –±—É–¥—É—Ç —á–∞—Å—Ç–æ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        state=QuestionsSG.faq
    ),
    Window(
        Const("–û—Ç–ø—Ä–∞–≤—å –≤ –±–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º ‚Äì –º—ã –ø–µ—Ä–µ—à–ª–µ–º –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ, –µ—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤—è—Ç—Å—è "
              "–Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ–π–¥–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –∏–∑ –º–µ–Ω—é)"),
        MessageInput(quest_handler, content_types=["text", "photo"]),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        state=QuestionsSG.ask
    ),
    launch_mode=LaunchMode.SINGLE_TOP
)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def get_data_programs(dialog_manager: DialogManager, **kwargs):
    # –î–æ—Å—Ç–∞–µ–º –∏–∑ –±–∞–∑—ã —Ç–µ–∫—Å—Ç—ã –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º
    programs_students = list(await Programs.filter(category="students").order_by("key").values_list("description", flat=True))
    names_students = list(await Programs.filter(category="students").order_by("key").values_list("name", flat=True))
    keys_students = list(await Programs.filter(category="students").order_by("key").values_list("key", flat=True))
    programs_school = list(await Programs.filter(category="school").order_by("key").values_list("description", flat=True))
    names_school = list(await Programs.filter(category="school").order_by("key").values_list("name", flat=True))
    keys_school = list(await Programs.filter(category="school").order_by("key").values_list("key", flat=True))
    preview_students = ''
    preview_school = ''

    for i in range(len(programs_students)):
        preview_students += f'<b>{keys_students[i]}. {names_students[i]}</b>\n{programs_students[i]}\n\n'

    for i in range(len(programs_school)):
        preview_school = f'<b>{keys_school[i]}. {names_school[i]}</b>\n{programs_school[i]}\n\n'

    return {
        'programs_list_student': preview_students,
        'programs_list_school': preview_school,
        'choose_program': dialog_manager.current_context().dialog_data.get("choose_program", None),
        'program_info': dialog_manager.current_context().dialog_data.get("program_info", None),
        'keys_students': keys_students,
        'keys_school': keys_school,
        'link': dialog_manager.current_context().dialog_data.get("link", None),
    }


async def on_program_clicked_std(c: ChatEvent, select: Select, manager: DialogManager, item_id: str):
    # –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ë–î
    manager.current_context().dialog_data["choose_program"] = item_id
    manager.current_context().dialog_data["program_info"] = "".join(
        await Programs.filter(key=int(item_id), category="students").values_list("info", flat=True))
    manager.current_context().dialog_data["link"] = "".join(
        await Programs.filter(key=int(item_id), category="students").values_list("link", flat=True))
    await manager.switch_to(ProgramsSG_std.program_info)


async def on_program_clicked_sch(c: ChatEvent, select: Select, manager: DialogManager, item_id: str):
    # –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ë–î
    manager.current_context().dialog_data["choose_program"] = item_id
    manager.current_context().dialog_data["program_info"] = "".join(
        await Programs.filter(key=int(item_id), category="school").values_list("info", flat=True))
    manager.current_context().dialog_data["link"] = "".join(
        await Programs.filter(key=int(item_id), category="school").values_list("link", flat=True))
    await manager.switch_to(ProgramsSG_sch.program_info)


# –î–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–∞–º–º –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ —é–∑–µ—Ä (—à–∫, —Å—Ç—É–¥)
# –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã –¥–ª—è –≤—Å–µ—Ö
# –¢–∞–∫ –∫–∞–∫ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å —Å–¥–µ–ª–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –Ω—É–∂–Ω–æ —á–µ—Ä–µ–∑ –±–¥, –≥–¥–µ –±—É–¥–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞
programs_dialog_sch = Dialog(
    Window(
        Format("{programs_list_school}"),
        Row(Select(
            Format("{item}"),
            items="keys_school",
            item_id_getter=lambda x: x,
            id="grades",
            on_click=on_program_clicked_sch
        )),
        # Button(Const("‚è™ –ù–∞–∑–∞–¥"), id="smrt_back_quest", on_click=smrt_back_is_admin),
        Cancel(Const("‚è™ –ù–∞–∑–∞–¥")),
        getter=get_data_programs,
        parse_mode=ParseMode.HTML,
        state=ProgramsSG_sch.choose_program
    ),
    Window(
        Format('{program_info}'),
        Url(
            Const("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!"),
            Format('{link}'),
        ),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        getter=get_data_programs,
        parse_mode=ParseMode.HTML,
        state=ProgramsSG_sch.program_info
    ),
    launch_mode=LaunchMode.SINGLE_TOP
)

programs_dialog_std = Dialog(
    Window(
        Format("{programs_list_student}"),
        Row(Select(
            Format("{item}"),
            items="keys_students",
            item_id_getter=lambda x: x,
            id="grades",
            on_click=on_program_clicked_std
        )),
        # Button(Const("‚è™ –ù–∞–∑–∞–¥"), id="smrt_back_quest", on_click=smrt_back_is_admin),
        Cancel(Const("‚è™ –ù–∞–∑–∞–¥")),
        getter=get_data_programs,
        parse_mode=ParseMode.HTML,
        state=ProgramsSG_std.choose_program
    ),
    Window(
        Format('{program_info}'),
        Url(
            Const("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!"),
            Format('{link}'),
        ),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        getter=get_data_programs,
        parse_mode=ParseMode.HTML,
        state=ProgramsSG_std.program_info
    ),
    launch_mode=LaunchMode.SINGLE_TOP
)
