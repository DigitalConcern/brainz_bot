from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ParseMode

from aiogram_dialog import Dialog, DialogManager, Window, ChatEvent, StartMode
from aiogram_dialog.manager.protocols import ManagedDialogAdapterProto, LaunchMode
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Select, Row, SwitchTo, Back, Start, Cancel
from aiogram_dialog.widgets.text import Const, Format

from database import ActiveUsers, Questions
from bot import MyBot
from config import Counter, NameCounter, CHAT_ID, programs_list


# PS: –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å –∫–∞–∫ —Ä–µ–¥–∞—á–∏—Ç—å —Ä—É–∫–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ docker, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–∫–∏–Ω—É—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—ã
# —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ –∏–Ω—Ñ—É –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RegistrationSG(StatesGroup):
    hi = State()
    name = State()
    grade = State()
    choose_grade = State()


async def start(m: Message, dialog_manager: DialogManager):
    if not (await ActiveUsers.filter(user_id=m.from_user.id).values_list("user_id")):
        await dialog_manager.start(RegistrationSG.hi, mode=StartMode.RESET_STACK)
        # –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        dialog_manager.current_context().dialog_data["id"] = m.from_user.id
    else:
        await MyBot.bot.send_message(m.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, '
                                                     f'<b>{"".join((await ActiveUsers.filter(user_id=m.from_user.id).values_list("user_name"))[0])}!</b>',
                                     parse_mode="HTML")
        # –ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é
        await dialog_manager.start(UserSG.menu, mode=StartMode.RESET_STACK)
        dialog_manager.current_context().dialog_data["name"] = \
            (await ActiveUsers.filter(user_id=m.from_user.id).values_list("user_name"))[0]
        dialog_manager.current_context().dialog_data["grade"] = \
            (await ActiveUsers.filter(user_id=m.from_user.id).values_list("grade"))[0]


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä start
MyBot.register_handler(method=start, text="/start", state="*")


async def name_handler(m: Message, dialog: ManagedDialogAdapterProto, manager: DialogManager):
    manager.current_context().dialog_data["name"] = m.text
    await manager.dialog().switch_to(RegistrationSG.grade)


# –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "—Å—Ç—É–¥–µ–Ω—Ç"
async def on_student_clicked(c: CallbackQuery, button: Button, manager: DialogManager):
    count = NameCounter.get_count()
    manager.current_context().dialog_data["grade"] = "12"
    while await ActiveUsers.filter(code_name=count).values_list():
        count = NameCounter.get_count()
    await ActiveUsers(user_id=manager.current_context().dialog_data["id"],
                      code_name=count,
                      user_name=manager.current_context().dialog_data["name"],
                      grade="12"
                      ).save()
    await MyBot.bot.send_message(manager.current_context().dialog_data["id"], "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –∑–∞—Ä–µ–≥–∞–Ω—ã!")
    await manager.done()
    await manager.start(UserSG.menu, mode=StartMode.RESET_STACK)


# –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è (–¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤)
async def on_grade_clicked(c: ChatEvent, select: Select, manager: DialogManager, item_id: str):
    count = NameCounter.get_count()
    manager.current_context().dialog_data["grade"] = item_id
    while await ActiveUsers.filter(code_name=count).values_list():
        count = NameCounter.get_count()
    await ActiveUsers(user_id=manager.current_context().dialog_data["id"],
                      code_name=count,
                      user_name=manager.current_context().dialog_data["name"],
                      grade=manager.current_context().dialog_data["grade"]
                      ).save()
    await MyBot.bot.send_message(manager.current_context().dialog_data["id"], "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –∑–∞—Ä–µ–≥–∞–Ω—ã!")
    await manager.done()
    await manager.start(UserSG.menu)


# –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
registration_dialog = Dialog(
    Window(
        Const("Greetings! –ú—ã - –ö–†–û–ö, –ø—Ä–æ–π–¥–∏ –ø–∂–∂ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"),
        SwitchTo(Const("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!"), id="fi", state=RegistrationSG.name),
        state=RegistrationSG.hi
    ),
    Window(
        Const("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"),
        MessageInput(name_handler),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        state=RegistrationSG.name
    ),
    Window(
        Const("–¢—ã —à–∫–æ–ª—å–Ω–∏–∫ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç?"),
        SwitchTo(Const("–®–∫–æ–ª—å–Ω–∏–∫"), id="school", state=RegistrationSG.choose_grade),
        Button(Const("–°—Ç—É–¥–µ–Ω—Ç"), id="student", on_click=on_student_clicked),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        state=RegistrationSG.grade
    ),
    Window(
        Const("–í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?"),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        Row(Select(
            Format("{item}"),
            items=["<7",
                   "8",
                   "9",
                   "10",
                   "11"
                   ],
            item_id_getter=lambda x: x,
            id="grades",
            on_click=on_grade_clicked,
        )),
        state=RegistrationSG.choose_grade
    )
)


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserSG(StatesGroup):
    menu = State()
    faq = State()
    ask = State()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–º
class ProgramsSG(StatesGroup):
    choose_program = State()
    program_info = State()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def get_data_user(dialog_manager: DialogManager, **kwargs):
    return {
        'id': dialog_manager.current_context().dialog_data.get("id", None),
        'name': dialog_manager.current_context().dialog_data.get("name", None),
        'grade': dialog_manager.current_context().dialog_data.get("grade", None),
    }


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
async def quest_handler(m: Message, dialog: ManagedDialogAdapterProto, manager: DialogManager):
    count = Counter.get_count()
    name = (await ActiveUsers.filter(user_id=m.from_user.id).values_list("code_name", flat=True))[0]
    while await Questions.filter(key=count).values_list():
        count = Counter.get_count()  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (—Ü–∏–∫–ª –Ω–∞ —Ç–æ—Ç —Å–ª—É—á–∞–π –µ—Å–ª–∏ –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—è—Ç)
    await MyBot.bot.send_message(CHAT_ID, f'<b>{str(count)}</b>' + '\n' + m.text + "\n–û—Ç: " + name, parse_mode="HTML")
    await Questions(key=count, user_id_id=m.from_user.id, question=m.text, is_answered=False).save()
    await MyBot.bot.send_message(m.from_user.id, '–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
    await manager.start(UserSG.menu, mode=StartMode.RESET_STACK)


# –î–∏–∞–ª–æ–≥ —é–∑–µ—Ä–∞ (—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
user_menu_dialog = Dialog(
    Window(
        Format("–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"),
        # –Ø –¥—É–º–∞–ª —Å–¥–µ–ª–∞—Ç—å –¥–≤–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —à–∫ –∏ —Å—Ç—É–¥, –Ω–æ —ç—Ç–æ —Ç—É–ø–æ, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –∫–∞–∫ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å
        # –∏–∑ –±–¥ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∫ –∏ —Å—Ç—É–¥–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        Start(Const("–ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ üßë‚Äçüéì"), id="stud", state=ProgramsSG.choose_program),
        Start(Const("–ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ üéí"), id="sch", state=ProgramsSG.choose_program),
        SwitchTo(Const("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã üìç"), id="FAQ", state=UserSG.faq),
        SwitchTo(Const("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì"), id="qu", state=UserSG.ask),
        parse_mode=ParseMode.HTML,
        # getter=get_data_user,
        state=UserSG.menu
    ),
    Window(
        Const("–ó–¥–µ—Å—å –±—É–¥—É—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        state=UserSG.faq
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å"),
        MessageInput(quest_handler),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        state=UserSG.ask
    ),
    launch_mode=LaunchMode.ROOT
)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def get_data_programs(dialog_manager: DialogManager, **kwargs):
    return {
        'choose_program': dialog_manager.current_context().dialog_data.get("choose_program", None),
        'program_info': dialog_manager.current_context().dialog_data.get("program_info", None)
    }


async def on_program_clicked(c: ChatEvent, select: Select, manager: DialogManager, item_id: str):
    # –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –±–¥
    manager.current_context().dialog_data["choose_program"] = item_id
    manager.current_context().dialog_data["program_info"] = programs_list[item_id]
    await manager.switch_to(ProgramsSG.program_info)

# –î–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–∞–º–º –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ —é–∑–µ—Ä (—à–∫, —Å—Ç—É–¥)
# –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã –¥–ª—è –≤—Å–µ—Ö
# –¢–∞–∫ –∫–∞–∫ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å —Å–¥–µ–ª–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –Ω—É–∂–Ω–æ —á–µ—Ä–µ–∑ –±–¥, –≥–¥–µ –±—É–¥–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞
programs = Dialog(
    Window(
        Format("<b>1. –õ–µ—Ç–Ω—è—è –ò–¢-—à–∫–æ–ª–∞ –ö–†–û–ö</b>\n"
               "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏–Ω—Ç–µ–Ω—Å–∏–≤ –ø–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—é –≤ –æ–¥–Ω—É –∏–∑ –ò–¢-–ø—Ä–æ—Ñ–µ—Å—Å–∏–π:"
               " –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ–¥–∞–∂.\n"
               "–í 2021 –≥–æ–¥—É —Å—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –ø–æ 10 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º!\n\n"
               "<b>2. –õ–∏–¥–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n"
               "–≠—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –ú—ã –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏,"
               " –∑–Ω–∞–∫–æ–º–∏–º —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –∏–∑ –±–∏–∑–Ω–µ—Å–∞ –∏ –ø–æ–º–æ–≥–∞–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –≤ —Å–≤–æ–µ–º –≤—É–∑–µ.\n\n"
               "<b>3. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —è–∑—ã–∫–µ –°#</b>\n"
               "–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ö–£–†–° –û–¢ –ö–†–û–ö\n"
               "–¢—ã –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —Ä–∞–∑–±–µ—Ä–µ—à—å—Å—è –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π,"
               " –ø–æ–≥—Ä—É–∑–∏—à—å—Å—è –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ C#"
               " –∏ —Å–æ–∑–¥–∞—à—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Microsoft.NET Framework\n\n"
               "<b>4. –í–í–ï–î–ï–ù–ò–ï –í –Ø–ó–´–ö JAVA –ò –ü–õ–ê–¢–§–û–†–ú–£ –†–ê–ó–†–ê–ë–û–¢–ö–ò</b>\n"
               "–°–∞–º—ã–µ –ø–µ—Ä–µ–¥–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –º–∏—Ä–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Java."
               " –≠–∫—Å–ø–µ—Ä—Ç—ã –∏ –∏–Ω–∂–µ–Ω–µ—Ä—ã-–ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ü–û\n\n"
               "<b>5. –ö–µ–π—Å-–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –ö–†–û–ö</b>\n"
               "–ó–∞–∫—Ä–æ–π –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ, —Ä–µ—à–∞—è –∫–µ–π—Å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∑–∞–ø—Ä–æ—Å. "
               "–¢–µ–±—è –∂–¥—É—Ç 12 –Ω–µ–¥–µ–ª—å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤\n\n"
               "<b>–ö–õ–ò–ö–ê–ô –ù–ê –ö–ù–û–ü–ö–ò —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</b>"),
        Row(Select(
            Format("{item}"),
            items=list(programs_list.keys()),
            item_id_getter=lambda x: x,
            id="grades",
            on_click=on_program_clicked
        )),
        Cancel(Const("‚è™ –ù–∞–∑–∞–¥")),
        # getter=get_data_programs,
        parse_mode=ParseMode.HTML,
        state=ProgramsSG.choose_program
    ),
    Window(
        Format('{program_info}'),
        Back(Const("‚è™ –ù–∞–∑–∞–¥")),
        getter=get_data_programs,
        parse_mode=ParseMode.HTML,
        state=ProgramsSG.program_info
    ),
    launch_mode=LaunchMode.SINGLE_TOP
)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥–∏
MyBot.register_dialogs(registration_dialog, user_menu_dialog, programs)
